/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  portfolios?: Array<GQLPortfolio | null>;
}

export interface GQLMutation {
  createPortfolio?: GQLPortfolio;
  deletePortfolio?: boolean;
}

export interface GQLPortfolio {
  id: string;
  name: string;
  baseIncome: number;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  Portfolio?: GQLPortfolioTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  portfolios?: QueryToPortfoliosResolver<TParent>;
}

export interface QueryToPortfoliosArgs {
  name?: string;
}
export interface QueryToPortfoliosResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPortfoliosArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  createPortfolio?: MutationToCreatePortfolioResolver<TParent>;
  deletePortfolio?: MutationToDeletePortfolioResolver<TParent>;
}

export interface MutationToCreatePortfolioArgs {
  name: string;
  baseIncome: number;
}
export interface MutationToCreatePortfolioResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreatePortfolioArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeletePortfolioArgs {
  name: string;
}
export interface MutationToDeletePortfolioResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeletePortfolioArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPortfolioTypeResolver<TParent = any> {
  id?: PortfolioToIdResolver<TParent>;
  name?: PortfolioToNameResolver<TParent>;
  baseIncome?: PortfolioToBaseIncomeResolver<TParent>;
}

export interface PortfolioToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PortfolioToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PortfolioToBaseIncomeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
